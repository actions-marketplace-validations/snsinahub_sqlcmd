name: 'action yml'
description: 'dotnet restore'
inputs:
  sql_path:  
    description: 'sql_path'
    required: false
  server_name:  
    description: 'Server Name or IP address'
    required: true
  db_name:  
    description: 'db name'
    required: true  
  sqlcmd_variables:  
    description: 'file_extenstion'
    required: false
    default: ""
  query_timeout:  
    description: 'query_timeout'
    required: false
    default: ""
  sqlcmd_action:  
    description: 'sqlcmd_action'
    required: true
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - run: |       
        echo "sqlcmd scripts"     
        
        if (!(Get-Module -ListAvailable -Name SqlServer)) 
        {            
            Write-Output "Installing PowerShell module $Name for current user"
            Install-PackageProvider -Name NuGet -Force -Scope CurrentUser;
            Install-Module -Name SqlServer -Force -AllowClobber -Scope CurrentUser -Repository PSGallery -SkipPublisherCheck;
        }

        if (-not (Get-Module -Name SqlServer)) 
        {            
            Import-Module -Name SqlServer -DisableNameChecking;
        }   
        
        ## create invoke command
        $PS = "Invoke-Sqlcmd -ServerInstance ${{ inputs.server_name }} -Database ${{ inputs.db_name }} -InputFile '${{ inputs.sql_path }}' -OutputSqlErrors 1 -ErrorAction Stop "

        ## set sqlcmd variables
        [string]$variables = ${{ inputs.sqlcmd_variables }}
        # [string[]]$VARS = @()
        [string]$VARS = ''
        $VARS = $variables -split ";" | ForEach-Object { $_.trim() }    
        $VARS = $variables.split(" ")
        $varArray = $(${{ inputs.sqlcmd_variables }})
        echo $variables
        
        


        ## set timeout time in seconds
        $TO = '${{ inputs.query_timeout }}'

        $i=0
        if ( $VARS -ne '' ) {
          $PS += " -Variable "           
          foreach ($item in $varArray) {      
            if( $i -ne 0 )
            {
              $PS += ' ,"' + $item + '" '
            }
            else 
            {
              $PS += ' "' + $item + '" '
              $i++;
            }                  
            
          }
        }
        else
        {
          echo "variable empty"
        }

        if ( $TO -ne '' ) {
          $PS += " -QueryTimeOut '${{ inputs.query_timeout }}'"
        }
        else
        {
          echo "TO empty"
        }

        ## Generate command
        $command = [Scriptblock]::Create($PS)
        echo "COMMAND --> $command"
        Invoke-Command -ScriptBlock $command


      id: sqlcmd-script          
      shell: powershell
      if: ${{ inputs.sqlcmd_action == 'script' }}
    
    
    


      